using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class 참조문서 
{
    // 유니티 프로파일링 URL
    /* https://dev-nicitis.tistory.com/7 */


    // Sprite 클래스와 Image 클래스의 차이점

    /*`Sprite` 클래스와 `Image` 클래스는 Unity에서 2D 그래픽을 다루는 데 사용되는 클래스들인데, 각각의 역할과 사용 용도가 조금 다릅니다.
   1. `Sprite`: `Sprite`는 Unity의 2D 그래픽 시스템에서 사용되는 텍스처의 한 형태입니다. `Sprite`는 텍스처, 크기, 위치, 회전 등의 정보를 포함하며, 
   이를 이용하여 2D 캐릭터, 배경, 아이템 등을 표현합니다. `Sprite`는 `SpriteRenderer` 컴포넌트를 통해 화면에 표시됩니다.
   2. `Image`: `Image`는 Unity의 UI 시스템에서 사용되는 컴포넌트 중 하나입니다. `Image` 컴포넌트는 `Sprite`를 이용하여 화면에 그림을 표시하는 역할을 합니다. 
   즉, UI 요소(버튼, 아이콘, 배경 등)를 화면에 표시할 때 사용됩니다.
   요약하면, `Sprite`는 2D 게임 오브젝트를 표현하는 데 사용되는 데이터 형식이고,
   `Image`는 이러한 `Sprite`를 이용하여 UI 요소를 화면에 표시하는 컴포넌트입니다.*/

    ///


    /*Scriptable Object는 대량의 데이터를 저장하는데 사용할 수 있는 데이터 컨테이너입니다. 

 메모리의 효율
 유니티에서 같은 오브젝트를 여러개 만들때, 프리팹이라는 방식으로 원본을 만들고 그 원본을 복사하여 원본과 똑같은 사본들을 만들어냅니다. 이런 경우에 Scriptable Object는 유용하게 사용될 수 있습니다. 
 프리팹을 인스턴스화 할 때 마다 해당 데이터의 자체 사본이 생성됩니다. 즉 사본을 많이 생성할수록 메모리를 많이 소모하게됩니다. 
 만약 원본 오브젝트가 1byte의 메모리를 사용한다면, 사본을 10개 만들면 10byte, 100개 만들면 100byte의 메모리가 필요합니다.
 단순히 1byte의 원본 데이터와 완전히 똑같은 데이터를 100개 저장하는데 메모리를 사용한다면, 이는 굉장히 비효율적이라고 볼 수 있습니다. 
 이 때, Scriptable Object를 사용한다면 메모리에서 단 1바이트만 사용하여 원본 데이터를 저장하고, 같은 내용을 사용하는 100개의 사본들은 이를 참조하는 방식으로 쓸 수 있습니다. 

  
    /*물리 레이캐스터(Physics Raycaster) 컴포넌트, 특히 이벤트 마스크(Event Mask) 옵션

유니티에서 물리 레이캐스터 컴포넌트는 이벤트 시스템과 함께 사용되어 3D 객체와의 상호작용을 위해 사용됩니다. 
    이 컴포넌트는 주로 카메라에 추가되어 클릭이나 터치와 같은 입력 목적으로 커서 아래나 터치되는 게임 내 객체를 감지하는 레이캐스팅을 활성화합니다.

이벤트 마스크
물리 레이캐스터 컴포넌트의 이벤트 마스크 설정을 통해 레이캐스터가 레이캐스트를 수행할 때 고려할 레이어를 필터링할 수 있습니다. 
    이는 게임 장면 내에서 상호작용성을 제어하는 데 매우 유용합니다. 예를 들어, UI 요소, 적, 환경 객체를 다른 레이어에 두었을 경우, UI 위에서의 클릭이 적이나 환경 객체와도 상호작용하지 않도록 하고 싶을 수 있습니다. 이벤트 마스크를 조정함으로써 어떤 레이어가 레이캐스트 검사에 포함되거나 제외될지 정확히 지정할 수 있습니다.

자세한 작동 방식은 다음과 같습니다:

레이어 기반 필터링: 유니티는 렌더링 및 물리 계산과 같은 다양한 목적을 위해 장면의 객체를 조직화하는 데 레이어를 사용합니다. 
    이벤트 마스크를 조정함으로써 물리 레이캐스터에게 특정 레이어에 있는 객체만 고려하도록 지시합니다. 이는 객체의 렌더링이나 이벤트 시스템 외부에서의 
    물리적 상호작용에는 영향을 미치지 않으며 오로지 이벤트 시스템을 통한 해당 객체에 대한 입력 감지 방식에만 영향을 미칩니다.

사용 사례: 상호작용 가능한 3D 객체와 비상호작용 3D 객체가 있는 게임을 상상해 보세요. 상호작용 가능한 객체를 "상호작용" 레이어에, 
    비상호작용 객체를 다른 레이어에 둘 수 있습니다. 물리 레이캐스터의 이벤트 마스크를 "상호작용" 레이어만 포함하도록 설정함으로써 해당 레이어에 있는 
    객체와의 상호작용만 감지하고 처리하도록 할 수 있습니다.

이벤트 마스크 구성: 유니티 에디터에서 이벤트 마스크 설정은 확인하거나 해제할 수 있는 레이어 목록으로 제공됩니다. 이 UI를 통해 레이캐스팅 프로세스에서 레이어를 포함시키거나 제외하기 쉽습니다.

최적화: 물리 레이캐스터가 확인하는 레이어를 제한함으로써 성능을 최적화할 수 있습니다. 입력에 반응하지 않는 객체에 대한 레이캐스트를 처리할 필요가 없으며, 
    이러한 레이어를 제외함으로써 특히 객체 수가 많은 장면에서 계산 부하를 줄일 수 있습니다.

물리 레이캐스터와 그 이벤트 마스크는 상호작용을 요구하는 3D 인터페이스를 가진 게임이나 
    애플리케이션을 작업하는 개발자에게 더 관련이 있으며, 이 컴포넌트를 효율적으로 사용하는 방법을 이해하는 것은 유니티 프로젝트의 사용자 경험과 성능에 중요한 영향을 미칠 수 있습니다.*/






}
